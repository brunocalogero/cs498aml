xlab="Fitted values",
ylab="Residuals",
abline(h = 0))
abalone.with_gender <- read_csv("./q3.csv")
abalone.with_gender[abalone.with_gender["sex"] == "F",]["sex"]<-"-1"
abalone.with_gender[abalone.with_gender["sex"] == "M",]["sex"]<-"1"
abalone.with_gender[abalone.with_gender["sex"] == "I",]["sex"]<-"0"
abalone.with_gender["sex"] = as.numeric(unlist(abalone.with_gender["sex"]))
abalone.lm_gender <- lm(age ~ 1 + sex + length + diameter + height + whole_weight + shuckled_weight + viscera_weight + shell_weight + rings, data = abalone.with_gender)
plot(abalone.lm_gender$fitted,
abalone.lm_gender$residuals,
main="Residuls vs Fitted",
sub="with gender",
xlab="Fitted values",
ylab="Residuals",
abline(h = 0))
abalone.lm_log <- lm(log(age) ~ 1 + length + diameter + height + whole_weight + shuckled_weight + viscera_weight + shell_weight + rings, data = abalone)
plot(abalone.lm_log$fitted,
abalone.lm_log$residuals,
main="Residuls vs Fitted",
sub="log scale, without gender",
xlab="Fitted values",
ylab="Residuals",
abline(h = 0))
abalone.lm_gender_log <- lm(log(age) ~ 1 + sex + length + diameter + height + whole_weight + shuckled_weight + viscera_weight + shell_weight + rings, data = abalone.with_gender)
plot(abalone.lm_gender_log$fitted,
abalone.lm_gender_log$residuals,
main="Residuls vs Fitted",
sub="log scale, with gender",
xlab="Fitted values",
ylab="Residuals",
abline(h = 0))
library(glmnet)
library(plotmo)
y <- abalone$age
# without gender, original scale
reg.lm <- as.matrix(data.frame(model.matrix(age ~ 1 + length + diameter + height + whole_weight + shuckled_weight + viscera_weight + shell_weight + rings, data = abalone)))
g.lm <- glmnet(reg.lm, y)
c.lm <- cv.glmnet(reg.lm, y)
plotres(g.lm)
par(mfrow=c(1,2))
plot(g.lm, main="Coef without gender, original scale")
plot(c.lm, main="Error without gender, original scale")
# with gender, original scale
reg.gender <- as.matrix(data.frame(model.matrix(age ~ 1 + sex + length + diameter + height + whole_weight + shuckled_weight + viscera_weight + shell_weight + rings, data = abalone.with_gender)))
g.gender <- glmnet(reg.gender, y)
c.gender <- cv.glmnet(reg.gender, y)
plotres(g.gender)
plot(g.gender, main="Coef with gender, original scale")
plot(c.gender, main="Error with gender, original scale")
# without gender, log scale
reg.log<- as.matrix(data.frame(model.matrix(log(age) ~ 1 + length + diameter + height + whole_weight + shuckled_weight + viscera_weight + shell_weight + rings, data = abalone)))
g.log <- glmnet(reg.log, y)
c.log <- cv.glmnet(reg.log, y)
plotres(g.log)
plot(g.log, main="Coef without gender, log scale")
plot(c.log, main="Error without gender, log scale")
# with gender, log scale
reg.log_gender <- as.matrix(data.frame(model.matrix(log(age) ~ 1 + sex + length + diameter + height + whole_weight + shuckled_weight + viscera_weight + shell_weight + rings, data = abalone.with_gender)))
g.log_gender <- glmnet(reg.log_gender, y)
c.log_gender <- cv.glmnet(reg.log_gender, y)
plotres(g.log_gender)
plot(g.log_gender, main="Coef with gender, log scale")
plot(c.log_gender, main="Error with gender, log scale")
c.log$lambda.min
c.log_gender$lambda.min
c.gender$lambda.min
c.lm$lambda.min
From the plots, we can see that the error we are getting for all of the data points, with and without doing the log transformation, are pretty low. Espicially, for the best lambda, 0.1031. Since we use regularization to avoid overfitting and and the large size of the Beta vector, doing the regularization will definitley imporove the regression.
options(scipen=1, digits=4, width=80)
library(faraway)
library(readr)
library(caret)
library(klaR)
library(lattice)
# preparing data
brunhild <- read_csv("./q1.csv")
# Making log-log transformed model
brunhild.lm_log = lm(log(Sulfate) ~ 1 + log(Hours), data=brunhild)
plot(log(brunhild$Hours),
log(brunhild$Sulfate),
main="Regression and points",
sub="log log scale",
xlab="Predictors (Log_Hours)",
ylab="Results (Log_Sulfate)")
abline(brunhild.lm_log, col="red")
summary(brunhild.lm_log)
# Making untransforned model
brunhild.lm = lm(Sulfate ~ 1 + Hours, data=brunhild)
plot(brunhild$Hours,
brunhild$Sulfate,
main="Regression and points",
sub="original data",
xlab="Predictors",
ylab="Results")
abline(brunhild.lm, col="red")
summary(brunhild.lm)
# Comparing residuals of the two models
# residual against fitted values in log-log coordinates
xyplot(resid(brunhild.lm_log) ~ fitted(brunhild.lm_log),
xlab = "Fitted Values",
ylab = "Residuals",
main = "Residual Diagnostic Plot",
panel = function(x, y, ...)
{
panel.grid(h = -1, v = -1)
panel.abline(h = 0)
panel.xyplot(x, y, ...)
}
)
# residual against fitted values in original coordinates
xyplot(resid(brunhild.lm) ~ fitted(brunhild.lm),
xlab = "Fitted Values",
ylab = "Residuals",
main = "Residual Diagnostic Plot",
panel = function(x, y, ...)
{
panel.grid(h = -1, v = -1)
panel.abline(h = 0)
panel.xyplot(x, y, ...)
}
)
#two windows will open, please look at both
# preparing data
physical <- read_csv("./q2.csv")
# Making original model
physical.lm <- lm(Mass ~ 1 + Fore + Bicep + Chest + Neck + Shoulder + Waist + Height + Calf + Thigh + Head, data=physical)
physical.scale = c(min(physical.lm$residuals), max(physical.lm$residuals))
summary(physical.lm)
plot(physical.lm$fitted,
physical.lm$residuals,
main="Residuls vs Fitted",
sub="original data",
xlab="Fitted values",
ylab="Residuals",
abline(h = 0))
# Making cube root model
physical.lm_trans <- lm((Mass)^(1/3) ~ 1 + Fore + Bicep + Chest + Neck + Shoulder + Waist + Height + Calf + Thigh + Head, data=physical)
summary(physical.lm_trans)
# Comparing residuals of two models
plot(physical.lm_trans$fitted,
physical.lm_trans$residuals,
main="Residuls vs Fitted",
sub="transformed data",
xlab="Fitted values",
ylab="Residuals",
abline(h = 0))
plot(physical.lm_trans$fitted,
physical.lm_trans$residuals,
main="Residuls vs Fitted",
sub="transformed data, original scale",
xlab="Fitted values",
ylab="Residuals",
ylim=physical.scale,
abline(h = 0))
# preparing data
abalone <- read_csv("./q3.csv")
abalone.lm <- lm(age ~ 1 + length + diameter + height + whole_weight + shuckled_weight + viscera_weight + shell_weight + rings, data = abalone)
plot(abalone.lm$fitted,
abalone.lm$residuals,
main="Residuls vs Fitted",
sub="without gender",
xlab="Fitted values",
ylab="Residuals",
abline(h = 0))
abalone.with_gender <- read_csv("./q3.csv")
abalone.with_gender[abalone.with_gender["sex"] == "F",]["sex"]<-"-1"
abalone.with_gender[abalone.with_gender["sex"] == "M",]["sex"]<-"1"
abalone.with_gender[abalone.with_gender["sex"] == "I",]["sex"]<-"0"
abalone.with_gender["sex"] = as.numeric(unlist(abalone.with_gender["sex"]))
abalone.lm_gender <- lm(age ~ 1 + sex + length + diameter + height + whole_weight + shuckled_weight + viscera_weight + shell_weight + rings, data = abalone.with_gender)
plot(abalone.lm_gender$fitted,
abalone.lm_gender$residuals,
main="Residuls vs Fitted",
sub="with gender",
xlab="Fitted values",
ylab="Residuals",
abline(h = 0))
abalone.lm_log <- lm(log(age) ~ 1 + length + diameter + height + whole_weight + shuckled_weight + viscera_weight + shell_weight + rings, data = abalone)
plot(abalone.lm_log$fitted,
abalone.lm_log$residuals,
main="Residuls vs Fitted",
sub="log scale, without gender",
xlab="Fitted values",
ylab="Residuals",
abline(h = 0))
abalone.lm_gender_log <- lm(log(age) ~ 1 + sex + length + diameter + height + whole_weight + shuckled_weight + viscera_weight + shell_weight + rings, data = abalone.with_gender)
plot(abalone.lm_gender_log$fitted,
abalone.lm_gender_log$residuals,
main="Residuls vs Fitted",
sub="log scale, with gender",
xlab="Fitted values",
ylab="Residuals",
abline(h = 0))
library(glmnet)
library(plotmo)
y <- abalone$age
# without gender, original scale
reg.lm <- as.matrix(data.frame(model.matrix(age ~ 1 + length + diameter + height + whole_weight + shuckled_weight + viscera_weight + shell_weight + rings, data = abalone)))
g.lm <- glmnet(reg.lm, y)
c.lm <- cv.glmnet(reg.lm, y)
plotres(g.lm)
par(mfrow=c(1,2))
plot(g.lm, main="Coef without gender, original scale")
plot(c.lm, main="Error without gender, original scale")
# with gender, original scale
reg.gender <- as.matrix(data.frame(model.matrix(age ~ 1 + sex + length + diameter + height + whole_weight + shuckled_weight + viscera_weight + shell_weight + rings, data = abalone.with_gender)))
g.gender <- glmnet(reg.gender, y)
c.gender <- cv.glmnet(reg.gender, y)
plotres(g.gender)
plot(g.gender, main="Coef with gender, original scale")
plot(c.gender, main="Error with gender, original scale")
# without gender, log scale
reg.log<- as.matrix(data.frame(model.matrix(log(age) ~ 1 + length + diameter + height + whole_weight + shuckled_weight + viscera_weight + shell_weight + rings, data = abalone)))
g.log <- glmnet(reg.log, y)
c.log <- cv.glmnet(reg.log, y)
plotres(g.log)
plot(g.log, main="Coef without gender, log scale")
plot(c.log, main="Error without gender, log scale")
# with gender, log scale
reg.log_gender <- as.matrix(data.frame(model.matrix(log(age) ~ 1 + sex + length + diameter + height + whole_weight + shuckled_weight + viscera_weight + shell_weight + rings, data = abalone.with_gender)))
g.log_gender <- glmnet(reg.log_gender, y)
c.log_gender <- cv.glmnet(reg.log_gender, y)
plotres(g.log_gender)
plot(g.log_gender, main="Coef with gender, log scale")
plot(c.log_gender, main="Error with gender, log scale")
setwd("~/Desktop/cs498aml/hw5")
setwd("~/Desktop/cs498aml/hw5")
options(scipen=1, digits=4, width=80)
library(faraway)
library(readr)
library(caret)
library(klaR)
library(lattice)
library(glmnet)
library(plotmo)
library(gridExtra)
install.packages("gridExtra")
cancer <- read_csv('./cancer.csv')
help(glmnet)
cancer[:10, :10]
cancer[, 2001]
cancer[, 2000]
cancer[, 0]
cancer[, 2001]
colnames(cancer)[2001] = 'normal'
cancer$normal
cancer
colnames(cancer)
cancer <- read_csv('./cancer.csv')
colnames(cancer)
cancer <- read_csv('./cancer.csv', headers=FALSE)
cancer <- read_csv('./cancer.csv', header=FALSE)
help("read_csv")
cancer <- read_csv('./cancer.csv', col_names=FALSE)
colnames(cancer)
colnames(cancer)[2001] = 'normal'
colnames(cancer)
cancer$normal
cancer[, 2001]
cancer$normal[10]
length(which(cancer$normal) < 0)
length(which(cancer$normal < 0))
length(which(cancer$normal == 0))
length(which(cancer$normal > 0))
cancer$normal[cancer$normal < 0] <- 1
cancer$normal[cancer$normal >= 0] <- -1
cancer$normal
length(which(cancer$normal) < 0)
length(which(cancer$normal < 0 ))
length(which(cancer$normal > 0))
cancer <- read_csv('./cancer.csv', col_names = FALSE)
cancer.num_features = dim(cancer)[2]-1
cancer.num_features
colnames(cancer[2001]) <- 'state'
cancer.lm_cv.lasso <- cv.glmnet(as.matrix(default[1:cancer.num_features]),
as.matrix(cancer$state),
family="binomial",
type.measure = "auc",
alpha=1)
cancer.lm_cv.lasso <- cv.glmnet(as.matrix(cancer[1:cancer.num_features]),
as.matrix(cancer$state),
family="binomial",
type.measure = "auc",
alpha=1)
colnames(cancer[2001]) <- 'state'
cancer.lm_cv.lasso <- cv.glmnet(as.matrix(cancer[1:cancer.num_features]),
as.matrix(cancer$state),
family="binomial",
type.measure = "auc",
alpha=1)
cancer$state
cancer <- read_csv('./cancer.csv', col_names = FALSE)
cancer.num_features = dim(cancer)[2]-1
colnames(cancer)[2001] <- 'state'
cancer$state
cancer.lm_cv.lasso <- cv.glmnet(as.matrix(cancer[1:cancer.num_features]),
as.matrix(cancer$state),
family="binomial",
type.measure = "auc",
alpha=1)
as.matrix(cancer$state)
as.matrix(cancer[1:cancer.num_features])
cancer.lm_cv.lasso <- cv.glmnet(as.matrix(cancer[1:cancer.num_features]),
as.matrix(cancer$state),
family="binomial",
type.measure = "auc",
alpha=1)
cancer.lm_cv.lasso <- cv.glmnet(as.matrix(cancer[1:cancer.num_features]),
cancer$state,
family="binomial",
type.measure = "auc",
alpha=1)
dim(as.matrix(cancer[1:cancer.num_features])
)
length(cancer$state)
as.matrix(cancer[1:cancer.num_features]
)
cancer.lm_cv.lasso <- cv.glmnet(as.matrix(cancer[1:cancer.num_features]),
cancer$state,
family="binomial",
type.measure = "auc",
alpha=1)
cancer.lm_cv.lasso <- cv.glmnet(as.matrix(model.matrix(cancer[1:cancer.num_features])),
cancer$state,
family="binomial",
type.measure = "auc",
alpha=1)
x <- as.matrix(model.matrix(cancer ~ .)[, -1])
cancer ~ .
model.matrix(cancer ~ .)
help(model.matrix)
??model.matrix
help(model.matrix)
length(which(is.na(cancer)))
cancer.lm_cv.lasso <- cv.glmnet(as.matrix(cancer[1:cancer.num_features]),
cancer$state,
family="binomial",
type.measure = "auc",
alpha=1)
cancer.lm_cv.lasso <- cv.glmnet(model.matrix(~ ., data=as.matrix(cancer[1:cancer.num_features])),
cancer$state,
family="binomial",
type.measure = "auc",
alpha=1)
cancer.lm_cv.lasso <- cv.glmnet(model.matrix(~ ., data=cancer[1:cancer.num_features]),
cancer$state,
family="binomial",
type.measure = "auc",
alpha=1)
plot(cancer.lm_cv.lasso)
cancer.lm_cv.lasso <- cv.glmnet(model.matrix(~ ., data=cancer[1:cancer.num_features]),
cancer$state,
family="binomial",
type.measure = "auc",
alpha=1, nfolds=5)
plot(cancer.lm_cv.lasso)
cancer.lm_cv.lasso <- cv.glmnet(model.matrix(~ ., data=cancer[1:cancer.num_features]),
cancer$state,
family="binomial",
type.measure = "auc",
alpha=1, nfolds=7)
plot(cancer.lm_cv.lasso)
cancer.lm_cv.lasso <- cv.glmnet(model.matrix(~ ., data=cancer[1:cancer.num_features]),
cancer$state,
family="binomial",
type.measure = "auc",
alpha=1, nfolds=6)
plot(cancer.lm_cv.lasso)
cancer.lm_cv.lasso <- cv.glmnet(model.matrix(~ ., data=cancer[1:cancer.num_features]),
cancer$state,
family="binomial",
type.measure = "auc",
alpha=1, nfolds=5)
plot(cancer.lm_cv.lasso)
help(gelmnet)
help(glmnet)
help(cv.glmnet)
cancer.lm_cv.lasso.deviance <- cv.glmnet(model.matrix(~ ., data=cancer[1:cancer.num_features]),
cancer$state,
family="binomial",
type.measure = "deviance",
alpha=1, nfolds=5)
plot(cancer.lm_cv.lasso.deviance)
cancer <- read_csv('./cancer.csv', col_names = FALSE)
cancer.num_features = dim(cancer)[2]-1
colnames(cancer)[2001] <- 'state'
# AUC
cancer.lm_cv.lasso.auc <- cv.glmnet(model.matrix(~ ., data=cancer[1:cancer.num_features]),
cancer$state,
family="binomial",
type.measure = "auc",
alpha=1, nfolds=5)
plot(cancer.lm_cv.lasso.auc)
# Deviance
cancer.lm_cv.lasso.deviance <- cv.glmnet(model.matrix(~ ., data=cancer[1:cancer.num_features]),
cancer$state,
family="binomial",
type.measure = "deviance",
alpha=1, nfolds=5)
plot(cancer.lm_cv.lasso.deviance)
cancer.lm_cv.lasso.deviance <- cv.glmnet(model.matrix(~ ., data=cancer[1:cancer.num_features]),
cancer$state,
family="binomial",
type.measure = "deviance",
alpha=1)
plot(cancer.lm_cv.lasso.deviance)
# Deviance
cancer.lm_cv.lasso.deviance <- cv.glmnet(model.matrix(~ ., data=cancer[1:cancer.num_features]),
cancer$state,
family="binomial",
type.measure = "deviance",
alpha=1, nfolds=5)
plot(cancer.lm_cv.lasso.deviance)
# Deviance
cancer.lm_cv.lasso.deviance <- cv.glmnet(model.matrix(~ ., data=cancer[1:cancer.num_features]),
cancer$state,
family="binomial",
type.measure = "deviance",
alpha=1, nfolds=5)
plot(cancer.lm_cv.lasso.deviance)
# Deviance
cancer.lm_cv.lasso.deviance <- cv.glmnet(model.matrix(~ ., data=cancer[1:cancer.num_features]),
cancer$state,
family="binomial",
type.measure = "deviance",
alpha=1)
plot(cancer.lm_cv.lasso.deviance)
# Deviance
cancer.lm_cv.lasso.deviance <- cv.glmnet(model.matrix(~ ., data=cancer[1:cancer.num_features]),
cancer$state,
family="binomial",
type.measure = "deviance",
alpha=1)
plot(cancer.lm_cv.lasso.deviance)
# Deviance
cancer.lm_cv.lasso.deviance <- cv.glmnet(model.matrix(~ ., data=cancer[1:cancer.num_features]),
cancer$state,
family="binomial",
type.measure = "deviance",
alpha=1)
plot(cancer.lm_cv.lasso.deviance)
# Deviance
cancer.lm_cv.lasso.deviance <- cv.glmnet(model.matrix(~ ., data=cancer[1:cancer.num_features]),
cancer$state,
family="binomial",
type.measure = "deviance",
alpha=1)
plot(cancer.lm_cv.lasso.deviance)
# AUC
cancer.lm_cv.lasso.auc <- cv.glmnet(model.matrix(~ ., data=cancer[1:cancer.num_features]),
cancer$state,
family="binomial",
type.measure = "auc",
alpha=1, nfolds=5)
plot(cancer.lm_cv.lasso.auc)
# Deviance
cancer.lm_cv.lasso.deviance <- cv.glmnet(model.matrix(~ ., data=cancer[1:cancer.num_features]),
cancer$state,
family="binomial",
type.measure = "deviance",
alpha=1)
plot(cancer.lm_cv.lasso.deviance)
# AUC
cancer.lm_cv.lasso.auc <- cv.glmnet(model.matrix(~ ., data=cancer[1:cancer.num_features]),
cancer$state,
family="binomial",
type.measure = "auc",
alpha=1, nfolds=5)
plot(cancer.lm_cv.lasso.auc)
# Deviance
cancer.lm_cv.lasso.deviance <- cv.glmnet(model.matrix(~ ., data=cancer[1:cancer.num_features]),
cancer$state,
family="binomial",
type.measure = "deviance",
alpha=1)
plot(cancer.lm_cv.lasso.deviance)
```{r read_cancer, message=FALSE}
cancer <- read_csv('./cancer.csv', col_names = FALSE)
cancer.num_features = dim(cancer)[2]-1
colnames(cancer)[2001] <- 'state'
# AUC
cancer.lm_cv.lasso.auc <- cv.glmnet(model.matrix(~ ., data=cancer[1:cancer.num_features]),
cancer$state,
family="binomial",
type.measure = "auc",
alpha=1, nfolds=5)
plot(cancer.lm_cv.lasso.auc)
# Deviance
cancer.lm_cv.lasso.deviance <- cv.glmnet(model.matrix(~ ., data=cancer[1:cancer.num_features]),
cancer$state,
family="binomial",
type.measure = "deviance",
alpha=1)
plot(cancer.lm_cv.lasso.deviance)
cancer <- read_csv('./cancer.csv', col_names = FALSE)
cancer.num_features = dim(cancer)[2]-1
colnames(cancer)[2001] <- 'state'
# AUC
cancer.lm_cv.lasso.auc <- cv.glmnet(model.matrix(~ ., data=cancer[1:cancer.num_features]),
cancer$state,
family="binomial",
type.measure = "auc",
alpha=1, nfolds=5)
plot(cancer.lm_cv.lasso.auc)
# Deviance
cancer.lm_cv.lasso.deviance <- cv.glmnet(model.matrix(~ ., data=cancer[1:cancer.num_features]),
cancer$state,
family="binomial",
type.measure = "deviance",
alpha=1)
plot(cancer.lm_cv.lasso.deviance)
